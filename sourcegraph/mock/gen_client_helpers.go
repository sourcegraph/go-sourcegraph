// +build ignore

package main

import (
	"flag"
	"fmt"
	"go/ast"
	"go/build"
	"go/format"
	"go/parser"
	"go/token"
	"io"
	"log"
	"os"
	"strings"
)

var (
	inSuffix   = flag.String("in_suffix", "_server_helpers.go", "input file suffixes")
	inPattern  = flag.String("in_pat", "Server", "input receiver type name pattern")
	outSuffix  = flag.String("out_suffix", "_client_helpers.go", "output file suffixes")
	outPattern = flag.String("out_pat", "Client", "output receiver type name pattern")

	fset = token.NewFileSet()
)

func main() {
	flag.Parse()
	log.SetFlags(0)

	bpkg, err := build.ImportDir(".", 0)
	if err != nil {
		log.Fatal(err)
	}

	for _, filename := range bpkg.GoFiles {
		if !strings.HasSuffix(filename, *inSuffix) {
			continue
		}

		astFile, err := parser.ParseFile(fset, filename, nil, parser.AllErrors)
		if err != nil {
			log.Fatal(err)
		}

		performSubstitution(astFile, *inPattern, *outPattern)
		outFilename := strings.TrimSuffix(filename, *inSuffix) + *outSuffix
		writeFile(outFilename, astFile)
	}
}

func writeFile(file string, astFile *ast.File) {
	var w io.Writer
	if file == "" {
		w = os.Stdout
	} else {
		f, err := os.Create(file)
		if err != nil {
			log.Fatal(err)
		}
		defer f.Close()
		w = f
	}

	fmt.Fprintln(w, "// GENERATED CODE - DO NOT EDIT!")
	fmt.Fprintln(w, "//")
	fmt.Fprintln(w, "// Generated by:")
	fmt.Fprintln(w, "//")
	fmt.Fprintf(w, "//   go run gen_client_helpers.go %s\n", strings.Join(os.Args[1:], " "))
	fmt.Fprintln(w, "//")
	fmt.Fprintln(w, "// Called via:")
	fmt.Fprintln(w, "//")
	fmt.Fprintln(w, "//   go generate")
	fmt.Fprintln(w, "//")
	fmt.Fprintln(w)

	if err := format.Node(w, fset, astFile); err != nil {
		log.Fatal(err)
	}
}

func performSubstitution(f *ast.File, origSuffix, newSuffix string) {
	for _, decl := range f.Decls {
		switch decl := decl.(type) {
		case *ast.FuncDecl:
			if decl.Recv != nil {
				for _, field := range decl.Recv.List {
					ft := field.Type
					if sx, ok := field.Type.(*ast.StarExpr); ok {
						ft = sx.X
					}
					if ident, ok := ft.(*ast.Ident); ok && strings.HasSuffix(ident.Name, origSuffix) {
						ident.Name = strings.TrimSuffix(ident.Name, origSuffix) + newSuffix
					}
				}
			}
		}
	}
}
