package sourcegraph

import (
	"fmt"

	"sourcegraph.com/sourcegraph/go-sourcegraph/spec"
)

func (u *User) Spec() UserSpec {
	return UserSpec{Login: u.Login, UID: u.UID, Domain: u.Domain}
}

// GitHubLogin returns the user's Login. They are the same for now, but callers
// that intend to get the GitHub login should call GitHubLogin() so that we can
// decouple the logins in the future if needed.
func (u *User) GitHubLogin() string {
	if u.GitHubID == 0 {
		return ""
	}
	return u.Login
}

// IsOrganization is whether this user represents a GitHub organization
// (which are treated as a subclass of User in GitHub's data model).
func (u *User) IsOrganization() bool { return u.Type == "Organization" }

// AvatarURLOfSize returns the URL to an avatar for the user with the
// given width (in pixels).
func (u *User) AvatarURLOfSize(width int) string {
	return avatarURLOfSize(u.AvatarURL, width)
}

func avatarURLOfSize(avatarURL string, width int) string {
	return avatarURL + fmt.Sprintf("&s=%d", width)
}

// CanOwnRepositories is whether the user is capable of owning repositories
// (e.g., GitHub users can own GitHub repositories).
func (u *User) CanOwnRepositories() bool {
	return u.GitHubLogin() != ""
}

// CanAttributeCodeTo is whether this user can commit code. It is false for
// organizations and true for both users and transient users.
func (u *User) CanAttributeCodeTo() bool {
	return !u.IsOrganization()
}

// Person returns an equivalent Person.
func (u *User) Person() *Person {
	return &Person{
		PersonSpec: PersonSpec{UID: u.UID, Login: u.Login},
		FullName:   u.Name,
		AvatarURL:  u.AvatarURL,
	}
}

// SpecString returns the UserSpec string.
func (s *UserSpec) SpecString() string {
	return spec.UserString(uint32(s.UID), s.Login, s.Domain)
}

func (s *UserSpec) RouteVars() map[string]string {
	return map[string]string{"User": s.SpecString()}
}

// ParseUserSpec parses a string generated by (*UserSpec).String() and
// returns the equivalent UserSpec struct.
func ParseUserSpec(s string) (UserSpec, error) {
	uid, login, domain, err := spec.ParseUser(s)
	if err != nil {
		return UserSpec{}, err
	}
	return UserSpec{
		UID:    int32(uid),
		Login:  login,
		Domain: domain,
	}, nil
}
