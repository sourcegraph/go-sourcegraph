package sourcegraph

import (
	"strconv"
	"strings"
)

// ShortName returns the person's Login if nonempty and otherwise
// returns the portion of Email before the '@'.
func (p *Person) ShortName() string {
	if p.Login != "" {
		return p.Login
	}
	at := strings.Index(p.Email, "@")
	if at == -1 {
		return "(anonymous)"
	}
	return p.Email[:at]
}

// Transient is true if this person was constructed on the fly and is
// not persisted or resolved to a Sourcegraph/GitHub/etc. user.
func (p *Person) Transient() bool { return p.UID == 0 }

// HasProfile is true if the person has a profile page on
// Sourcegraph. Transient users currently do not have profile pages.
func (p *Person) HasProfile() bool { return !p.Transient() }

// AvatarURLOfSize returns the URL to an avatar for the user with the
// given width (in pixels).
func (p *Person) AvatarURLOfSize(width int) string {
	return avatarURLOfSize(p.AvatarURL, width)
}

// PathComponent returns the URL path component that specifies the person.
func (s *PersonSpec) PathComponent() string {
	if s.Email != "" {
		return s.Email
	}
	if s.Login != "" {
		return s.Login
	}
	if s.UID > 0 {
		return "$" + strconv.Itoa(int(s.UID))
	}
	panic("empty PersonSpec")
}

func (s *PersonSpec) RouteVars() map[string]string {
	return map[string]string{"PersonSpec": s.PathComponent()}
}

// ParsePersonSpec parses a string generated by (*PersonSpec).String() and
// returns the equivalent PersonSpec struct.
func ParsePersonSpec(pathComponent string) (PersonSpec, error) {
	if strings.HasPrefix(pathComponent, "$") {
		uid, err := strconv.Atoi(pathComponent[1:])
		return PersonSpec{UID: int32(uid)}, err
	}
	if strings.Contains(pathComponent, "@") {
		return PersonSpec{Email: pathComponent}, nil
	}
	return PersonSpec{Login: pathComponent}, nil
}
