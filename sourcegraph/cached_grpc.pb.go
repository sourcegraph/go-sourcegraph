// GENERATED CODE - DO NOT EDIT!
//
// Generated by:
//
//   go run gen_trace.go -o cached_grpc.pb.go -pkg sourcegraph -files sourcegraph.com/sourcegraph/go-sourcegraph/sourcegraph@sourcegraph.pb.go
//
// Called via:
//
//   go generate
//

package sourcegraph

import (
	"golang.org/x/net/context"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
	"sourcegraph.com/sourcegraph/go-vcs/vcs"
	"sourcegraph.com/sourcegraph/srclib/unit"
	"sourcegraph.com/sqs/grpccache"
	"sourcegraph.com/sqs/pbtypes"
)

type CachedAccountsServer struct{ AccountsServer }

func (s *CachedAccountsServer) Create(ctx context.Context, in *NewAccount) (*UserSpec, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.AccountsServer.Create(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedAccountsServer) RequestPasswordReset(ctx context.Context, in *UserSpec) (*User, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.AccountsServer.RequestPasswordReset(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedAccountsServer) ResetPassword(ctx context.Context, in *NewPassword) (*pbtypes.Void, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.AccountsServer.ResetPassword(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedAccountsServer) Update(ctx context.Context, in *User) (*pbtypes.Void, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.AccountsServer.Update(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

type CachedAccountsClient struct {
	AccountsClient
	Cache *grpccache.Cache
}

func (s *CachedAccountsClient) Create(ctx context.Context, in *NewAccount, opts ...grpc.CallOption) (*UserSpec, error) {
	if s.Cache != nil {
		var cachedResult UserSpec
		cached, err := s.Cache.Get(ctx, "Accounts.Create", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.AccountsClient.Create(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Accounts.Create", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedAccountsClient) RequestPasswordReset(ctx context.Context, in *UserSpec, opts ...grpc.CallOption) (*User, error) {
	if s.Cache != nil {
		var cachedResult User
		cached, err := s.Cache.Get(ctx, "Accounts.RequestPasswordReset", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.AccountsClient.RequestPasswordReset(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Accounts.RequestPasswordReset", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedAccountsClient) ResetPassword(ctx context.Context, in *NewPassword, opts ...grpc.CallOption) (*pbtypes.Void, error) {
	if s.Cache != nil {
		var cachedResult pbtypes.Void
		cached, err := s.Cache.Get(ctx, "Accounts.ResetPassword", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.AccountsClient.ResetPassword(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Accounts.ResetPassword", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedAccountsClient) Update(ctx context.Context, in *User, opts ...grpc.CallOption) (*pbtypes.Void, error) {
	if s.Cache != nil {
		var cachedResult pbtypes.Void
		cached, err := s.Cache.Get(ctx, "Accounts.Update", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.AccountsClient.Update(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Accounts.Update", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

type CachedAuthServer struct{ AuthServer }

func (s *CachedAuthServer) GetAuthorizationCode(ctx context.Context, in *AuthorizationCodeRequest) (*AuthorizationCode, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.AuthServer.GetAuthorizationCode(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedAuthServer) GetAccessToken(ctx context.Context, in *AccessTokenRequest) (*AccessTokenResponse, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.AuthServer.GetAccessToken(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedAuthServer) Identify(ctx context.Context, in *pbtypes.Void) (*AuthInfo, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.AuthServer.Identify(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

type CachedAuthClient struct {
	AuthClient
	Cache *grpccache.Cache
}

func (s *CachedAuthClient) GetAuthorizationCode(ctx context.Context, in *AuthorizationCodeRequest, opts ...grpc.CallOption) (*AuthorizationCode, error) {
	if s.Cache != nil {
		var cachedResult AuthorizationCode
		cached, err := s.Cache.Get(ctx, "Auth.GetAuthorizationCode", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.AuthClient.GetAuthorizationCode(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Auth.GetAuthorizationCode", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedAuthClient) GetAccessToken(ctx context.Context, in *AccessTokenRequest, opts ...grpc.CallOption) (*AccessTokenResponse, error) {
	if s.Cache != nil {
		var cachedResult AccessTokenResponse
		cached, err := s.Cache.Get(ctx, "Auth.GetAccessToken", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.AuthClient.GetAccessToken(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Auth.GetAccessToken", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedAuthClient) Identify(ctx context.Context, in *pbtypes.Void, opts ...grpc.CallOption) (*AuthInfo, error) {
	if s.Cache != nil {
		var cachedResult AuthInfo
		cached, err := s.Cache.Get(ctx, "Auth.Identify", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.AuthClient.Identify(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Auth.Identify", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

type CachedBuildsServer struct{ BuildsServer }

func (s *CachedBuildsServer) Get(ctx context.Context, in *BuildSpec) (*Build, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.BuildsServer.Get(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedBuildsServer) GetRepoBuildInfo(ctx context.Context, in *BuildsGetRepoBuildInfoOp) (*RepoBuildInfo, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.BuildsServer.GetRepoBuildInfo(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedBuildsServer) List(ctx context.Context, in *BuildListOptions) (*BuildList, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.BuildsServer.List(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedBuildsServer) Create(ctx context.Context, in *BuildsCreateOp) (*Build, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.BuildsServer.Create(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedBuildsServer) Update(ctx context.Context, in *BuildsUpdateOp) (*Build, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.BuildsServer.Update(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedBuildsServer) ListBuildTasks(ctx context.Context, in *BuildsListBuildTasksOp) (*BuildTaskList, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.BuildsServer.ListBuildTasks(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedBuildsServer) CreateTasks(ctx context.Context, in *BuildsCreateTasksOp) (*BuildTaskList, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.BuildsServer.CreateTasks(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedBuildsServer) UpdateTask(ctx context.Context, in *BuildsUpdateTaskOp) (*BuildTask, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.BuildsServer.UpdateTask(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedBuildsServer) GetLog(ctx context.Context, in *BuildsGetLogOp) (*LogEntries, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.BuildsServer.GetLog(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedBuildsServer) GetTaskLog(ctx context.Context, in *BuildsGetTaskLogOp) (*LogEntries, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.BuildsServer.GetTaskLog(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedBuildsServer) DequeueNext(ctx context.Context, in *BuildsDequeueNextOp) (*Build, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.BuildsServer.DequeueNext(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

type CachedBuildsClient struct {
	BuildsClient
	Cache *grpccache.Cache
}

func (s *CachedBuildsClient) Get(ctx context.Context, in *BuildSpec, opts ...grpc.CallOption) (*Build, error) {
	if s.Cache != nil {
		var cachedResult Build
		cached, err := s.Cache.Get(ctx, "Builds.Get", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.BuildsClient.Get(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Builds.Get", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedBuildsClient) GetRepoBuildInfo(ctx context.Context, in *BuildsGetRepoBuildInfoOp, opts ...grpc.CallOption) (*RepoBuildInfo, error) {
	if s.Cache != nil {
		var cachedResult RepoBuildInfo
		cached, err := s.Cache.Get(ctx, "Builds.GetRepoBuildInfo", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.BuildsClient.GetRepoBuildInfo(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Builds.GetRepoBuildInfo", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedBuildsClient) List(ctx context.Context, in *BuildListOptions, opts ...grpc.CallOption) (*BuildList, error) {
	if s.Cache != nil {
		var cachedResult BuildList
		cached, err := s.Cache.Get(ctx, "Builds.List", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.BuildsClient.List(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Builds.List", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedBuildsClient) Create(ctx context.Context, in *BuildsCreateOp, opts ...grpc.CallOption) (*Build, error) {
	if s.Cache != nil {
		var cachedResult Build
		cached, err := s.Cache.Get(ctx, "Builds.Create", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.BuildsClient.Create(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Builds.Create", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedBuildsClient) Update(ctx context.Context, in *BuildsUpdateOp, opts ...grpc.CallOption) (*Build, error) {
	if s.Cache != nil {
		var cachedResult Build
		cached, err := s.Cache.Get(ctx, "Builds.Update", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.BuildsClient.Update(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Builds.Update", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedBuildsClient) ListBuildTasks(ctx context.Context, in *BuildsListBuildTasksOp, opts ...grpc.CallOption) (*BuildTaskList, error) {
	if s.Cache != nil {
		var cachedResult BuildTaskList
		cached, err := s.Cache.Get(ctx, "Builds.ListBuildTasks", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.BuildsClient.ListBuildTasks(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Builds.ListBuildTasks", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedBuildsClient) CreateTasks(ctx context.Context, in *BuildsCreateTasksOp, opts ...grpc.CallOption) (*BuildTaskList, error) {
	if s.Cache != nil {
		var cachedResult BuildTaskList
		cached, err := s.Cache.Get(ctx, "Builds.CreateTasks", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.BuildsClient.CreateTasks(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Builds.CreateTasks", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedBuildsClient) UpdateTask(ctx context.Context, in *BuildsUpdateTaskOp, opts ...grpc.CallOption) (*BuildTask, error) {
	if s.Cache != nil {
		var cachedResult BuildTask
		cached, err := s.Cache.Get(ctx, "Builds.UpdateTask", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.BuildsClient.UpdateTask(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Builds.UpdateTask", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedBuildsClient) GetLog(ctx context.Context, in *BuildsGetLogOp, opts ...grpc.CallOption) (*LogEntries, error) {
	if s.Cache != nil {
		var cachedResult LogEntries
		cached, err := s.Cache.Get(ctx, "Builds.GetLog", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.BuildsClient.GetLog(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Builds.GetLog", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedBuildsClient) GetTaskLog(ctx context.Context, in *BuildsGetTaskLogOp, opts ...grpc.CallOption) (*LogEntries, error) {
	if s.Cache != nil {
		var cachedResult LogEntries
		cached, err := s.Cache.Get(ctx, "Builds.GetTaskLog", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.BuildsClient.GetTaskLog(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Builds.GetTaskLog", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedBuildsClient) DequeueNext(ctx context.Context, in *BuildsDequeueNextOp, opts ...grpc.CallOption) (*Build, error) {
	if s.Cache != nil {
		var cachedResult Build
		cached, err := s.Cache.Get(ctx, "Builds.DequeueNext", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.BuildsClient.DequeueNext(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Builds.DequeueNext", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

type CachedChangesetsServer struct{ ChangesetsServer }

func (s *CachedChangesetsServer) Create(ctx context.Context, in *ChangesetCreateOp) (*Changeset, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.ChangesetsServer.Create(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedChangesetsServer) Get(ctx context.Context, in *ChangesetSpec) (*Changeset, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.ChangesetsServer.Get(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedChangesetsServer) List(ctx context.Context, in *ChangesetListOp) (*ChangesetList, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.ChangesetsServer.List(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedChangesetsServer) Update(ctx context.Context, in *ChangesetUpdateOp) (*ChangesetEvent, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.ChangesetsServer.Update(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedChangesetsServer) CreateReview(ctx context.Context, in *ChangesetCreateReviewOp) (*ChangesetReview, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.ChangesetsServer.CreateReview(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedChangesetsServer) ListReviews(ctx context.Context, in *ChangesetListReviewsOp) (*ChangesetReviewList, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.ChangesetsServer.ListReviews(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedChangesetsServer) ListEvents(ctx context.Context, in *ChangesetSpec) (*ChangesetEventList, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.ChangesetsServer.ListEvents(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

type CachedChangesetsClient struct {
	ChangesetsClient
	Cache *grpccache.Cache
}

func (s *CachedChangesetsClient) Create(ctx context.Context, in *ChangesetCreateOp, opts ...grpc.CallOption) (*Changeset, error) {
	if s.Cache != nil {
		var cachedResult Changeset
		cached, err := s.Cache.Get(ctx, "Changesets.Create", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.ChangesetsClient.Create(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Changesets.Create", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedChangesetsClient) Get(ctx context.Context, in *ChangesetSpec, opts ...grpc.CallOption) (*Changeset, error) {
	if s.Cache != nil {
		var cachedResult Changeset
		cached, err := s.Cache.Get(ctx, "Changesets.Get", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.ChangesetsClient.Get(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Changesets.Get", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedChangesetsClient) List(ctx context.Context, in *ChangesetListOp, opts ...grpc.CallOption) (*ChangesetList, error) {
	if s.Cache != nil {
		var cachedResult ChangesetList
		cached, err := s.Cache.Get(ctx, "Changesets.List", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.ChangesetsClient.List(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Changesets.List", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedChangesetsClient) Update(ctx context.Context, in *ChangesetUpdateOp, opts ...grpc.CallOption) (*ChangesetEvent, error) {
	if s.Cache != nil {
		var cachedResult ChangesetEvent
		cached, err := s.Cache.Get(ctx, "Changesets.Update", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.ChangesetsClient.Update(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Changesets.Update", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedChangesetsClient) CreateReview(ctx context.Context, in *ChangesetCreateReviewOp, opts ...grpc.CallOption) (*ChangesetReview, error) {
	if s.Cache != nil {
		var cachedResult ChangesetReview
		cached, err := s.Cache.Get(ctx, "Changesets.CreateReview", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.ChangesetsClient.CreateReview(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Changesets.CreateReview", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedChangesetsClient) ListReviews(ctx context.Context, in *ChangesetListReviewsOp, opts ...grpc.CallOption) (*ChangesetReviewList, error) {
	if s.Cache != nil {
		var cachedResult ChangesetReviewList
		cached, err := s.Cache.Get(ctx, "Changesets.ListReviews", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.ChangesetsClient.ListReviews(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Changesets.ListReviews", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedChangesetsClient) ListEvents(ctx context.Context, in *ChangesetSpec, opts ...grpc.CallOption) (*ChangesetEventList, error) {
	if s.Cache != nil {
		var cachedResult ChangesetEventList
		cached, err := s.Cache.Get(ctx, "Changesets.ListEvents", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.ChangesetsClient.ListEvents(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Changesets.ListEvents", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

type CachedDefsServer struct{ DefsServer }

func (s *CachedDefsServer) Get(ctx context.Context, in *DefsGetOp) (*Def, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.DefsServer.Get(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedDefsServer) List(ctx context.Context, in *DefListOptions) (*DefList, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.DefsServer.List(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedDefsServer) ListRefs(ctx context.Context, in *DefsListRefsOp) (*RefList, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.DefsServer.ListRefs(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedDefsServer) ListExamples(ctx context.Context, in *DefsListExamplesOp) (*ExampleList, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.DefsServer.ListExamples(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedDefsServer) ListAuthors(ctx context.Context, in *DefsListAuthorsOp) (*DefAuthorList, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.DefsServer.ListAuthors(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedDefsServer) ListClients(ctx context.Context, in *DefsListClientsOp) (*DefClientList, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.DefsServer.ListClients(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

type CachedDefsClient struct {
	DefsClient
	Cache *grpccache.Cache
}

func (s *CachedDefsClient) Get(ctx context.Context, in *DefsGetOp, opts ...grpc.CallOption) (*Def, error) {
	if s.Cache != nil {
		var cachedResult Def
		cached, err := s.Cache.Get(ctx, "Defs.Get", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.DefsClient.Get(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Defs.Get", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedDefsClient) List(ctx context.Context, in *DefListOptions, opts ...grpc.CallOption) (*DefList, error) {
	if s.Cache != nil {
		var cachedResult DefList
		cached, err := s.Cache.Get(ctx, "Defs.List", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.DefsClient.List(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Defs.List", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedDefsClient) ListRefs(ctx context.Context, in *DefsListRefsOp, opts ...grpc.CallOption) (*RefList, error) {
	if s.Cache != nil {
		var cachedResult RefList
		cached, err := s.Cache.Get(ctx, "Defs.ListRefs", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.DefsClient.ListRefs(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Defs.ListRefs", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedDefsClient) ListExamples(ctx context.Context, in *DefsListExamplesOp, opts ...grpc.CallOption) (*ExampleList, error) {
	if s.Cache != nil {
		var cachedResult ExampleList
		cached, err := s.Cache.Get(ctx, "Defs.ListExamples", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.DefsClient.ListExamples(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Defs.ListExamples", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedDefsClient) ListAuthors(ctx context.Context, in *DefsListAuthorsOp, opts ...grpc.CallOption) (*DefAuthorList, error) {
	if s.Cache != nil {
		var cachedResult DefAuthorList
		cached, err := s.Cache.Get(ctx, "Defs.ListAuthors", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.DefsClient.ListAuthors(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Defs.ListAuthors", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedDefsClient) ListClients(ctx context.Context, in *DefsListClientsOp, opts ...grpc.CallOption) (*DefClientList, error) {
	if s.Cache != nil {
		var cachedResult DefClientList
		cached, err := s.Cache.Get(ctx, "Defs.ListClients", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.DefsClient.ListClients(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Defs.ListClients", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

type CachedDeltasServer struct{ DeltasServer }

func (s *CachedDeltasServer) Get(ctx context.Context, in *DeltaSpec) (*Delta, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.DeltasServer.Get(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedDeltasServer) ListUnits(ctx context.Context, in *DeltasListUnitsOp) (*UnitDeltaList, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.DeltasServer.ListUnits(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedDeltasServer) ListDefs(ctx context.Context, in *DeltasListDefsOp) (*DeltaDefs, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.DeltasServer.ListDefs(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedDeltasServer) ListFiles(ctx context.Context, in *DeltasListFilesOp) (*DeltaFiles, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.DeltasServer.ListFiles(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedDeltasServer) ListAffectedAuthors(ctx context.Context, in *DeltasListAffectedAuthorsOp) (*DeltaAffectedPersonList, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.DeltasServer.ListAffectedAuthors(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedDeltasServer) ListAffectedClients(ctx context.Context, in *DeltasListAffectedClientsOp) (*DeltaAffectedPersonList, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.DeltasServer.ListAffectedClients(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

type CachedDeltasClient struct {
	DeltasClient
	Cache *grpccache.Cache
}

func (s *CachedDeltasClient) Get(ctx context.Context, in *DeltaSpec, opts ...grpc.CallOption) (*Delta, error) {
	if s.Cache != nil {
		var cachedResult Delta
		cached, err := s.Cache.Get(ctx, "Deltas.Get", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.DeltasClient.Get(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Deltas.Get", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedDeltasClient) ListUnits(ctx context.Context, in *DeltasListUnitsOp, opts ...grpc.CallOption) (*UnitDeltaList, error) {
	if s.Cache != nil {
		var cachedResult UnitDeltaList
		cached, err := s.Cache.Get(ctx, "Deltas.ListUnits", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.DeltasClient.ListUnits(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Deltas.ListUnits", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedDeltasClient) ListDefs(ctx context.Context, in *DeltasListDefsOp, opts ...grpc.CallOption) (*DeltaDefs, error) {
	if s.Cache != nil {
		var cachedResult DeltaDefs
		cached, err := s.Cache.Get(ctx, "Deltas.ListDefs", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.DeltasClient.ListDefs(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Deltas.ListDefs", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedDeltasClient) ListFiles(ctx context.Context, in *DeltasListFilesOp, opts ...grpc.CallOption) (*DeltaFiles, error) {
	if s.Cache != nil {
		var cachedResult DeltaFiles
		cached, err := s.Cache.Get(ctx, "Deltas.ListFiles", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.DeltasClient.ListFiles(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Deltas.ListFiles", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedDeltasClient) ListAffectedAuthors(ctx context.Context, in *DeltasListAffectedAuthorsOp, opts ...grpc.CallOption) (*DeltaAffectedPersonList, error) {
	if s.Cache != nil {
		var cachedResult DeltaAffectedPersonList
		cached, err := s.Cache.Get(ctx, "Deltas.ListAffectedAuthors", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.DeltasClient.ListAffectedAuthors(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Deltas.ListAffectedAuthors", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedDeltasClient) ListAffectedClients(ctx context.Context, in *DeltasListAffectedClientsOp, opts ...grpc.CallOption) (*DeltaAffectedPersonList, error) {
	if s.Cache != nil {
		var cachedResult DeltaAffectedPersonList
		cached, err := s.Cache.Get(ctx, "Deltas.ListAffectedClients", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.DeltasClient.ListAffectedClients(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Deltas.ListAffectedClients", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

type CachedDiscussionsServer struct{ DiscussionsServer }

func (s *CachedDiscussionsServer) Create(ctx context.Context, in *Discussion) (*Discussion, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.DiscussionsServer.Create(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedDiscussionsServer) Get(ctx context.Context, in *DiscussionSpec) (*Discussion, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.DiscussionsServer.Get(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedDiscussionsServer) List(ctx context.Context, in *DiscussionListOp) (*DiscussionList, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.DiscussionsServer.List(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedDiscussionsServer) CreateComment(ctx context.Context, in *DiscussionCommentCreateOp) (*DiscussionComment, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.DiscussionsServer.CreateComment(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedDiscussionsServer) UpdateRating(ctx context.Context, in *DiscussionRatingUpdateOp) (*pbtypes.Void, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.DiscussionsServer.UpdateRating(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

type CachedDiscussionsClient struct {
	DiscussionsClient
	Cache *grpccache.Cache
}

func (s *CachedDiscussionsClient) Create(ctx context.Context, in *Discussion, opts ...grpc.CallOption) (*Discussion, error) {
	if s.Cache != nil {
		var cachedResult Discussion
		cached, err := s.Cache.Get(ctx, "Discussions.Create", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.DiscussionsClient.Create(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Discussions.Create", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedDiscussionsClient) Get(ctx context.Context, in *DiscussionSpec, opts ...grpc.CallOption) (*Discussion, error) {
	if s.Cache != nil {
		var cachedResult Discussion
		cached, err := s.Cache.Get(ctx, "Discussions.Get", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.DiscussionsClient.Get(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Discussions.Get", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedDiscussionsClient) List(ctx context.Context, in *DiscussionListOp, opts ...grpc.CallOption) (*DiscussionList, error) {
	if s.Cache != nil {
		var cachedResult DiscussionList
		cached, err := s.Cache.Get(ctx, "Discussions.List", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.DiscussionsClient.List(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Discussions.List", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedDiscussionsClient) CreateComment(ctx context.Context, in *DiscussionCommentCreateOp, opts ...grpc.CallOption) (*DiscussionComment, error) {
	if s.Cache != nil {
		var cachedResult DiscussionComment
		cached, err := s.Cache.Get(ctx, "Discussions.CreateComment", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.DiscussionsClient.CreateComment(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Discussions.CreateComment", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedDiscussionsClient) UpdateRating(ctx context.Context, in *DiscussionRatingUpdateOp, opts ...grpc.CallOption) (*pbtypes.Void, error) {
	if s.Cache != nil {
		var cachedResult pbtypes.Void
		cached, err := s.Cache.Get(ctx, "Discussions.UpdateRating", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.DiscussionsClient.UpdateRating(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Discussions.UpdateRating", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

type CachedGraphUplinkServer struct{ GraphUplinkServer }

func (s *CachedGraphUplinkServer) Push(ctx context.Context, in *MetricsSnapshot) (*pbtypes.Void, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.GraphUplinkServer.Push(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

type CachedGraphUplinkClient struct {
	GraphUplinkClient
	Cache *grpccache.Cache
}

func (s *CachedGraphUplinkClient) Push(ctx context.Context, in *MetricsSnapshot, opts ...grpc.CallOption) (*pbtypes.Void, error) {
	if s.Cache != nil {
		var cachedResult pbtypes.Void
		cached, err := s.Cache.Get(ctx, "GraphUplink.Push", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.GraphUplinkClient.Push(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "GraphUplink.Push", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

type CachedMarkdownServer struct{ MarkdownServer }

func (s *CachedMarkdownServer) Render(ctx context.Context, in *MarkdownRenderOp) (*MarkdownData, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.MarkdownServer.Render(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

type CachedMarkdownClient struct {
	MarkdownClient
	Cache *grpccache.Cache
}

func (s *CachedMarkdownClient) Render(ctx context.Context, in *MarkdownRenderOp, opts ...grpc.CallOption) (*MarkdownData, error) {
	if s.Cache != nil {
		var cachedResult MarkdownData
		cached, err := s.Cache.Get(ctx, "Markdown.Render", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.MarkdownClient.Render(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Markdown.Render", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

type CachedMetaServer struct{ MetaServer }

func (s *CachedMetaServer) Status(ctx context.Context, in *pbtypes.Void) (*ServerStatus, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.MetaServer.Status(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedMetaServer) Config(ctx context.Context, in *pbtypes.Void) (*ServerConfig, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.MetaServer.Config(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

type CachedMetaClient struct {
	MetaClient
	Cache *grpccache.Cache
}

func (s *CachedMetaClient) Status(ctx context.Context, in *pbtypes.Void, opts ...grpc.CallOption) (*ServerStatus, error) {
	if s.Cache != nil {
		var cachedResult ServerStatus
		cached, err := s.Cache.Get(ctx, "Meta.Status", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.MetaClient.Status(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Meta.Status", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedMetaClient) Config(ctx context.Context, in *pbtypes.Void, opts ...grpc.CallOption) (*ServerConfig, error) {
	if s.Cache != nil {
		var cachedResult ServerConfig
		cached, err := s.Cache.Get(ctx, "Meta.Config", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.MetaClient.Config(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Meta.Config", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

type CachedMirrorReposServer struct{ MirrorReposServer }

func (s *CachedMirrorReposServer) RefreshVCS(ctx context.Context, in *MirrorReposRefreshVCSOp) (*pbtypes.Void, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.MirrorReposServer.RefreshVCS(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

type CachedMirrorReposClient struct {
	MirrorReposClient
	Cache *grpccache.Cache
}

func (s *CachedMirrorReposClient) RefreshVCS(ctx context.Context, in *MirrorReposRefreshVCSOp, opts ...grpc.CallOption) (*pbtypes.Void, error) {
	if s.Cache != nil {
		var cachedResult pbtypes.Void
		cached, err := s.Cache.Get(ctx, "MirrorRepos.RefreshVCS", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.MirrorReposClient.RefreshVCS(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "MirrorRepos.RefreshVCS", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

type CachedMirroredRepoSSHKeysServer struct{ MirroredRepoSSHKeysServer }

func (s *CachedMirroredRepoSSHKeysServer) Create(ctx context.Context, in *MirroredRepoSSHKeysCreateOp) (*pbtypes.Void, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.MirroredRepoSSHKeysServer.Create(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedMirroredRepoSSHKeysServer) Get(ctx context.Context, in *RepoSpec) (*SSHPrivateKey, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.MirroredRepoSSHKeysServer.Get(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedMirroredRepoSSHKeysServer) Delete(ctx context.Context, in *RepoSpec) (*pbtypes.Void, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.MirroredRepoSSHKeysServer.Delete(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

type CachedMirroredRepoSSHKeysClient struct {
	MirroredRepoSSHKeysClient
	Cache *grpccache.Cache
}

func (s *CachedMirroredRepoSSHKeysClient) Create(ctx context.Context, in *MirroredRepoSSHKeysCreateOp, opts ...grpc.CallOption) (*pbtypes.Void, error) {
	if s.Cache != nil {
		var cachedResult pbtypes.Void
		cached, err := s.Cache.Get(ctx, "MirroredRepoSSHKeys.Create", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.MirroredRepoSSHKeysClient.Create(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "MirroredRepoSSHKeys.Create", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedMirroredRepoSSHKeysClient) Get(ctx context.Context, in *RepoSpec, opts ...grpc.CallOption) (*SSHPrivateKey, error) {
	if s.Cache != nil {
		var cachedResult SSHPrivateKey
		cached, err := s.Cache.Get(ctx, "MirroredRepoSSHKeys.Get", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.MirroredRepoSSHKeysClient.Get(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "MirroredRepoSSHKeys.Get", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedMirroredRepoSSHKeysClient) Delete(ctx context.Context, in *RepoSpec, opts ...grpc.CallOption) (*pbtypes.Void, error) {
	if s.Cache != nil {
		var cachedResult pbtypes.Void
		cached, err := s.Cache.Get(ctx, "MirroredRepoSSHKeys.Delete", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.MirroredRepoSSHKeysClient.Delete(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "MirroredRepoSSHKeys.Delete", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

type CachedOrgsServer struct{ OrgsServer }

func (s *CachedOrgsServer) Get(ctx context.Context, in *OrgSpec) (*Org, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.OrgsServer.Get(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedOrgsServer) List(ctx context.Context, in *OrgsListOp) (*OrgList, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.OrgsServer.List(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedOrgsServer) ListMembers(ctx context.Context, in *OrgsListMembersOp) (*UserList, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.OrgsServer.ListMembers(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

type CachedOrgsClient struct {
	OrgsClient
	Cache *grpccache.Cache
}

func (s *CachedOrgsClient) Get(ctx context.Context, in *OrgSpec, opts ...grpc.CallOption) (*Org, error) {
	if s.Cache != nil {
		var cachedResult Org
		cached, err := s.Cache.Get(ctx, "Orgs.Get", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.OrgsClient.Get(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Orgs.Get", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedOrgsClient) List(ctx context.Context, in *OrgsListOp, opts ...grpc.CallOption) (*OrgList, error) {
	if s.Cache != nil {
		var cachedResult OrgList
		cached, err := s.Cache.Get(ctx, "Orgs.List", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.OrgsClient.List(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Orgs.List", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedOrgsClient) ListMembers(ctx context.Context, in *OrgsListMembersOp, opts ...grpc.CallOption) (*UserList, error) {
	if s.Cache != nil {
		var cachedResult UserList
		cached, err := s.Cache.Get(ctx, "Orgs.ListMembers", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.OrgsClient.ListMembers(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Orgs.ListMembers", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

type CachedPeopleServer struct{ PeopleServer }

func (s *CachedPeopleServer) Get(ctx context.Context, in *PersonSpec) (*Person, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.PeopleServer.Get(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

type CachedPeopleClient struct {
	PeopleClient
	Cache *grpccache.Cache
}

func (s *CachedPeopleClient) Get(ctx context.Context, in *PersonSpec, opts ...grpc.CallOption) (*Person, error) {
	if s.Cache != nil {
		var cachedResult Person
		cached, err := s.Cache.Get(ctx, "People.Get", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.PeopleClient.Get(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "People.Get", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

type CachedRegisteredClientsServer struct{ RegisteredClientsServer }

func (s *CachedRegisteredClientsServer) Get(ctx context.Context, in *RegisteredClientSpec) (*RegisteredClient, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.RegisteredClientsServer.Get(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedRegisteredClientsServer) GetCurrent(ctx context.Context, in *pbtypes.Void) (*RegisteredClient, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.RegisteredClientsServer.GetCurrent(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedRegisteredClientsServer) Create(ctx context.Context, in *RegisteredClient) (*RegisteredClient, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.RegisteredClientsServer.Create(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedRegisteredClientsServer) Update(ctx context.Context, in *RegisteredClient) (*pbtypes.Void, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.RegisteredClientsServer.Update(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedRegisteredClientsServer) Delete(ctx context.Context, in *RegisteredClientSpec) (*pbtypes.Void, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.RegisteredClientsServer.Delete(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedRegisteredClientsServer) List(ctx context.Context, in *RegisteredClientListOptions) (*RegisteredClientList, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.RegisteredClientsServer.List(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedRegisteredClientsServer) GetUserPermissions(ctx context.Context, in *UserPermissionsOptions) (*UserPermissions, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.RegisteredClientsServer.GetUserPermissions(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedRegisteredClientsServer) SetUserPermissions(ctx context.Context, in *UserPermissions) (*pbtypes.Void, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.RegisteredClientsServer.SetUserPermissions(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedRegisteredClientsServer) ListUserPermissions(ctx context.Context, in *RegisteredClientSpec) (*UserPermissionsList, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.RegisteredClientsServer.ListUserPermissions(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

type CachedRegisteredClientsClient struct {
	RegisteredClientsClient
	Cache *grpccache.Cache
}

func (s *CachedRegisteredClientsClient) Get(ctx context.Context, in *RegisteredClientSpec, opts ...grpc.CallOption) (*RegisteredClient, error) {
	if s.Cache != nil {
		var cachedResult RegisteredClient
		cached, err := s.Cache.Get(ctx, "RegisteredClients.Get", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.RegisteredClientsClient.Get(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "RegisteredClients.Get", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedRegisteredClientsClient) GetCurrent(ctx context.Context, in *pbtypes.Void, opts ...grpc.CallOption) (*RegisteredClient, error) {
	if s.Cache != nil {
		var cachedResult RegisteredClient
		cached, err := s.Cache.Get(ctx, "RegisteredClients.GetCurrent", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.RegisteredClientsClient.GetCurrent(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "RegisteredClients.GetCurrent", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedRegisteredClientsClient) Create(ctx context.Context, in *RegisteredClient, opts ...grpc.CallOption) (*RegisteredClient, error) {
	if s.Cache != nil {
		var cachedResult RegisteredClient
		cached, err := s.Cache.Get(ctx, "RegisteredClients.Create", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.RegisteredClientsClient.Create(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "RegisteredClients.Create", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedRegisteredClientsClient) Update(ctx context.Context, in *RegisteredClient, opts ...grpc.CallOption) (*pbtypes.Void, error) {
	if s.Cache != nil {
		var cachedResult pbtypes.Void
		cached, err := s.Cache.Get(ctx, "RegisteredClients.Update", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.RegisteredClientsClient.Update(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "RegisteredClients.Update", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedRegisteredClientsClient) Delete(ctx context.Context, in *RegisteredClientSpec, opts ...grpc.CallOption) (*pbtypes.Void, error) {
	if s.Cache != nil {
		var cachedResult pbtypes.Void
		cached, err := s.Cache.Get(ctx, "RegisteredClients.Delete", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.RegisteredClientsClient.Delete(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "RegisteredClients.Delete", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedRegisteredClientsClient) List(ctx context.Context, in *RegisteredClientListOptions, opts ...grpc.CallOption) (*RegisteredClientList, error) {
	if s.Cache != nil {
		var cachedResult RegisteredClientList
		cached, err := s.Cache.Get(ctx, "RegisteredClients.List", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.RegisteredClientsClient.List(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "RegisteredClients.List", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedRegisteredClientsClient) GetUserPermissions(ctx context.Context, in *UserPermissionsOptions, opts ...grpc.CallOption) (*UserPermissions, error) {
	if s.Cache != nil {
		var cachedResult UserPermissions
		cached, err := s.Cache.Get(ctx, "RegisteredClients.GetUserPermissions", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.RegisteredClientsClient.GetUserPermissions(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "RegisteredClients.GetUserPermissions", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedRegisteredClientsClient) SetUserPermissions(ctx context.Context, in *UserPermissions, opts ...grpc.CallOption) (*pbtypes.Void, error) {
	if s.Cache != nil {
		var cachedResult pbtypes.Void
		cached, err := s.Cache.Get(ctx, "RegisteredClients.SetUserPermissions", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.RegisteredClientsClient.SetUserPermissions(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "RegisteredClients.SetUserPermissions", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedRegisteredClientsClient) ListUserPermissions(ctx context.Context, in *RegisteredClientSpec, opts ...grpc.CallOption) (*UserPermissionsList, error) {
	if s.Cache != nil {
		var cachedResult UserPermissionsList
		cached, err := s.Cache.Get(ctx, "RegisteredClients.ListUserPermissions", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.RegisteredClientsClient.ListUserPermissions(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "RegisteredClients.ListUserPermissions", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

type CachedRepoBadgesServer struct{ RepoBadgesServer }

func (s *CachedRepoBadgesServer) ListBadges(ctx context.Context, in *RepoSpec) (*BadgeList, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.RepoBadgesServer.ListBadges(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedRepoBadgesServer) ListCounters(ctx context.Context, in *RepoSpec) (*CounterList, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.RepoBadgesServer.ListCounters(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedRepoBadgesServer) RecordHit(ctx context.Context, in *RepoSpec) (*pbtypes.Void, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.RepoBadgesServer.RecordHit(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedRepoBadgesServer) CountHits(ctx context.Context, in *RepoBadgesCountHitsOp) (*RepoBadgesCountHitsResult, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.RepoBadgesServer.CountHits(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

type CachedRepoBadgesClient struct {
	RepoBadgesClient
	Cache *grpccache.Cache
}

func (s *CachedRepoBadgesClient) ListBadges(ctx context.Context, in *RepoSpec, opts ...grpc.CallOption) (*BadgeList, error) {
	if s.Cache != nil {
		var cachedResult BadgeList
		cached, err := s.Cache.Get(ctx, "RepoBadges.ListBadges", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.RepoBadgesClient.ListBadges(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "RepoBadges.ListBadges", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedRepoBadgesClient) ListCounters(ctx context.Context, in *RepoSpec, opts ...grpc.CallOption) (*CounterList, error) {
	if s.Cache != nil {
		var cachedResult CounterList
		cached, err := s.Cache.Get(ctx, "RepoBadges.ListCounters", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.RepoBadgesClient.ListCounters(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "RepoBadges.ListCounters", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedRepoBadgesClient) RecordHit(ctx context.Context, in *RepoSpec, opts ...grpc.CallOption) (*pbtypes.Void, error) {
	if s.Cache != nil {
		var cachedResult pbtypes.Void
		cached, err := s.Cache.Get(ctx, "RepoBadges.RecordHit", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.RepoBadgesClient.RecordHit(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "RepoBadges.RecordHit", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedRepoBadgesClient) CountHits(ctx context.Context, in *RepoBadgesCountHitsOp, opts ...grpc.CallOption) (*RepoBadgesCountHitsResult, error) {
	if s.Cache != nil {
		var cachedResult RepoBadgesCountHitsResult
		cached, err := s.Cache.Get(ctx, "RepoBadges.CountHits", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.RepoBadgesClient.CountHits(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "RepoBadges.CountHits", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

type CachedRepoStatusesServer struct{ RepoStatusesServer }

func (s *CachedRepoStatusesServer) GetCombined(ctx context.Context, in *RepoRevSpec) (*CombinedStatus, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.RepoStatusesServer.GetCombined(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedRepoStatusesServer) Create(ctx context.Context, in *RepoStatusesCreateOp) (*RepoStatus, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.RepoStatusesServer.Create(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

type CachedRepoStatusesClient struct {
	RepoStatusesClient
	Cache *grpccache.Cache
}

func (s *CachedRepoStatusesClient) GetCombined(ctx context.Context, in *RepoRevSpec, opts ...grpc.CallOption) (*CombinedStatus, error) {
	if s.Cache != nil {
		var cachedResult CombinedStatus
		cached, err := s.Cache.Get(ctx, "RepoStatuses.GetCombined", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.RepoStatusesClient.GetCombined(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "RepoStatuses.GetCombined", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedRepoStatusesClient) Create(ctx context.Context, in *RepoStatusesCreateOp, opts ...grpc.CallOption) (*RepoStatus, error) {
	if s.Cache != nil {
		var cachedResult RepoStatus
		cached, err := s.Cache.Get(ctx, "RepoStatuses.Create", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.RepoStatusesClient.Create(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "RepoStatuses.Create", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

type CachedRepoTreeServer struct{ RepoTreeServer }

func (s *CachedRepoTreeServer) Get(ctx context.Context, in *RepoTreeGetOp) (*TreeEntry, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.RepoTreeServer.Get(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedRepoTreeServer) Search(ctx context.Context, in *RepoTreeSearchOp) (*VCSSearchResultList, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.RepoTreeServer.Search(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedRepoTreeServer) List(ctx context.Context, in *RepoTreeListOp) (*RepoTreeListResult, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.RepoTreeServer.List(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

type CachedRepoTreeClient struct {
	RepoTreeClient
	Cache *grpccache.Cache
}

func (s *CachedRepoTreeClient) Get(ctx context.Context, in *RepoTreeGetOp, opts ...grpc.CallOption) (*TreeEntry, error) {
	if s.Cache != nil {
		var cachedResult TreeEntry
		cached, err := s.Cache.Get(ctx, "RepoTree.Get", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.RepoTreeClient.Get(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "RepoTree.Get", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedRepoTreeClient) Search(ctx context.Context, in *RepoTreeSearchOp, opts ...grpc.CallOption) (*VCSSearchResultList, error) {
	if s.Cache != nil {
		var cachedResult VCSSearchResultList
		cached, err := s.Cache.Get(ctx, "RepoTree.Search", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.RepoTreeClient.Search(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "RepoTree.Search", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedRepoTreeClient) List(ctx context.Context, in *RepoTreeListOp, opts ...grpc.CallOption) (*RepoTreeListResult, error) {
	if s.Cache != nil {
		var cachedResult RepoTreeListResult
		cached, err := s.Cache.Get(ctx, "RepoTree.List", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.RepoTreeClient.List(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "RepoTree.List", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

type CachedReposServer struct{ ReposServer }

func (s *CachedReposServer) Get(ctx context.Context, in *RepoSpec) (*Repo, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.ReposServer.Get(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedReposServer) List(ctx context.Context, in *RepoListOptions) (*RepoList, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.ReposServer.List(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedReposServer) Create(ctx context.Context, in *ReposCreateOp) (*Repo, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.ReposServer.Create(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedReposServer) Delete(ctx context.Context, in *RepoSpec) (*pbtypes.Void, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.ReposServer.Delete(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedReposServer) GetReadme(ctx context.Context, in *RepoRevSpec) (*Readme, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.ReposServer.GetReadme(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedReposServer) Enable(ctx context.Context, in *RepoSpec) (*pbtypes.Void, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.ReposServer.Enable(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedReposServer) Disable(ctx context.Context, in *RepoSpec) (*pbtypes.Void, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.ReposServer.Disable(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedReposServer) GetConfig(ctx context.Context, in *RepoSpec) (*RepoConfig, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.ReposServer.GetConfig(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedReposServer) GetCommit(ctx context.Context, in *RepoRevSpec) (*vcs.Commit, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.ReposServer.GetCommit(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedReposServer) ListCommits(ctx context.Context, in *ReposListCommitsOp) (*CommitList, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.ReposServer.ListCommits(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedReposServer) ListBranches(ctx context.Context, in *ReposListBranchesOp) (*BranchList, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.ReposServer.ListBranches(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedReposServer) ListTags(ctx context.Context, in *ReposListTagsOp) (*TagList, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.ReposServer.ListTags(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedReposServer) ListCommitters(ctx context.Context, in *ReposListCommittersOp) (*CommitterList, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.ReposServer.ListCommitters(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

type CachedReposClient struct {
	ReposClient
	Cache *grpccache.Cache
}

func (s *CachedReposClient) Get(ctx context.Context, in *RepoSpec, opts ...grpc.CallOption) (*Repo, error) {
	if s.Cache != nil {
		var cachedResult Repo
		cached, err := s.Cache.Get(ctx, "Repos.Get", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.ReposClient.Get(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Repos.Get", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedReposClient) List(ctx context.Context, in *RepoListOptions, opts ...grpc.CallOption) (*RepoList, error) {
	if s.Cache != nil {
		var cachedResult RepoList
		cached, err := s.Cache.Get(ctx, "Repos.List", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.ReposClient.List(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Repos.List", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedReposClient) Create(ctx context.Context, in *ReposCreateOp, opts ...grpc.CallOption) (*Repo, error) {
	if s.Cache != nil {
		var cachedResult Repo
		cached, err := s.Cache.Get(ctx, "Repos.Create", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.ReposClient.Create(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Repos.Create", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedReposClient) Delete(ctx context.Context, in *RepoSpec, opts ...grpc.CallOption) (*pbtypes.Void, error) {
	if s.Cache != nil {
		var cachedResult pbtypes.Void
		cached, err := s.Cache.Get(ctx, "Repos.Delete", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.ReposClient.Delete(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Repos.Delete", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedReposClient) GetReadme(ctx context.Context, in *RepoRevSpec, opts ...grpc.CallOption) (*Readme, error) {
	if s.Cache != nil {
		var cachedResult Readme
		cached, err := s.Cache.Get(ctx, "Repos.GetReadme", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.ReposClient.GetReadme(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Repos.GetReadme", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedReposClient) Enable(ctx context.Context, in *RepoSpec, opts ...grpc.CallOption) (*pbtypes.Void, error) {
	if s.Cache != nil {
		var cachedResult pbtypes.Void
		cached, err := s.Cache.Get(ctx, "Repos.Enable", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.ReposClient.Enable(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Repos.Enable", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedReposClient) Disable(ctx context.Context, in *RepoSpec, opts ...grpc.CallOption) (*pbtypes.Void, error) {
	if s.Cache != nil {
		var cachedResult pbtypes.Void
		cached, err := s.Cache.Get(ctx, "Repos.Disable", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.ReposClient.Disable(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Repos.Disable", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedReposClient) GetConfig(ctx context.Context, in *RepoSpec, opts ...grpc.CallOption) (*RepoConfig, error) {
	if s.Cache != nil {
		var cachedResult RepoConfig
		cached, err := s.Cache.Get(ctx, "Repos.GetConfig", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.ReposClient.GetConfig(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Repos.GetConfig", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedReposClient) GetCommit(ctx context.Context, in *RepoRevSpec, opts ...grpc.CallOption) (*vcs.Commit, error) {
	if s.Cache != nil {
		var cachedResult vcs.Commit
		cached, err := s.Cache.Get(ctx, "Repos.GetCommit", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.ReposClient.GetCommit(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Repos.GetCommit", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedReposClient) ListCommits(ctx context.Context, in *ReposListCommitsOp, opts ...grpc.CallOption) (*CommitList, error) {
	if s.Cache != nil {
		var cachedResult CommitList
		cached, err := s.Cache.Get(ctx, "Repos.ListCommits", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.ReposClient.ListCommits(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Repos.ListCommits", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedReposClient) ListBranches(ctx context.Context, in *ReposListBranchesOp, opts ...grpc.CallOption) (*BranchList, error) {
	if s.Cache != nil {
		var cachedResult BranchList
		cached, err := s.Cache.Get(ctx, "Repos.ListBranches", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.ReposClient.ListBranches(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Repos.ListBranches", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedReposClient) ListTags(ctx context.Context, in *ReposListTagsOp, opts ...grpc.CallOption) (*TagList, error) {
	if s.Cache != nil {
		var cachedResult TagList
		cached, err := s.Cache.Get(ctx, "Repos.ListTags", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.ReposClient.ListTags(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Repos.ListTags", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedReposClient) ListCommitters(ctx context.Context, in *ReposListCommittersOp, opts ...grpc.CallOption) (*CommitterList, error) {
	if s.Cache != nil {
		var cachedResult CommitterList
		cached, err := s.Cache.Get(ctx, "Repos.ListCommitters", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.ReposClient.ListCommitters(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Repos.ListCommitters", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

type CachedSearchServer struct{ SearchServer }

func (s *CachedSearchServer) Search(ctx context.Context, in *SearchOptions) (*SearchResults, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.SearchServer.Search(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedSearchServer) Complete(ctx context.Context, in *RawQuery) (*Completions, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.SearchServer.Complete(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedSearchServer) Suggest(ctx context.Context, in *RawQuery) (*SuggestionList, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.SearchServer.Suggest(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

type CachedSearchClient struct {
	SearchClient
	Cache *grpccache.Cache
}

func (s *CachedSearchClient) Search(ctx context.Context, in *SearchOptions, opts ...grpc.CallOption) (*SearchResults, error) {
	if s.Cache != nil {
		var cachedResult SearchResults
		cached, err := s.Cache.Get(ctx, "Search.Search", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.SearchClient.Search(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Search.Search", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedSearchClient) Complete(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*Completions, error) {
	if s.Cache != nil {
		var cachedResult Completions
		cached, err := s.Cache.Get(ctx, "Search.Complete", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.SearchClient.Complete(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Search.Complete", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedSearchClient) Suggest(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*SuggestionList, error) {
	if s.Cache != nil {
		var cachedResult SuggestionList
		cached, err := s.Cache.Get(ctx, "Search.Suggest", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.SearchClient.Suggest(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Search.Suggest", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

type CachedUnitsServer struct{ UnitsServer }

func (s *CachedUnitsServer) Get(ctx context.Context, in *UnitSpec) (*unit.RepoSourceUnit, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.UnitsServer.Get(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedUnitsServer) List(ctx context.Context, in *UnitListOptions) (*RepoSourceUnitList, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.UnitsServer.List(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

type CachedUnitsClient struct {
	UnitsClient
	Cache *grpccache.Cache
}

func (s *CachedUnitsClient) Get(ctx context.Context, in *UnitSpec, opts ...grpc.CallOption) (*unit.RepoSourceUnit, error) {
	if s.Cache != nil {
		var cachedResult unit.RepoSourceUnit
		cached, err := s.Cache.Get(ctx, "Units.Get", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.UnitsClient.Get(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Units.Get", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedUnitsClient) List(ctx context.Context, in *UnitListOptions, opts ...grpc.CallOption) (*RepoSourceUnitList, error) {
	if s.Cache != nil {
		var cachedResult RepoSourceUnitList
		cached, err := s.Cache.Get(ctx, "Units.List", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.UnitsClient.List(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Units.List", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

type CachedUsersServer struct{ UsersServer }

func (s *CachedUsersServer) Get(ctx context.Context, in *UserSpec) (*User, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.UsersServer.Get(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedUsersServer) ListEmails(ctx context.Context, in *UserSpec) (*EmailAddrList, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.UsersServer.ListEmails(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

func (s *CachedUsersServer) List(ctx context.Context, in *UsersListOptions) (*UserList, error) {
	ctx, cc := grpccache.Internal_WithCacheControl(ctx)
	result, err := s.UsersServer.List(ctx, in)
	if !cc.IsZero() {
		if err := grpccache.Internal_SetCacheControlTrailer(ctx, *cc); err != nil {
			return nil, err
		}
	}
	return result, err
}

type CachedUsersClient struct {
	UsersClient
	Cache *grpccache.Cache
}

func (s *CachedUsersClient) Get(ctx context.Context, in *UserSpec, opts ...grpc.CallOption) (*User, error) {
	if s.Cache != nil {
		var cachedResult User
		cached, err := s.Cache.Get(ctx, "Users.Get", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.UsersClient.Get(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Users.Get", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedUsersClient) ListEmails(ctx context.Context, in *UserSpec, opts ...grpc.CallOption) (*EmailAddrList, error) {
	if s.Cache != nil {
		var cachedResult EmailAddrList
		cached, err := s.Cache.Get(ctx, "Users.ListEmails", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.UsersClient.ListEmails(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Users.ListEmails", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}

func (s *CachedUsersClient) List(ctx context.Context, in *UsersListOptions, opts ...grpc.CallOption) (*UserList, error) {
	if s.Cache != nil {
		var cachedResult UserList
		cached, err := s.Cache.Get(ctx, "Users.List", in, &cachedResult)
		if err != nil {
			return nil, err
		}
		if cached {
			return &cachedResult, nil
		}
	}

	var trailer metadata.MD

	result, err := s.UsersClient.List(ctx, in, grpc.Trailer(&trailer))
	if err != nil {
		return nil, err
	}
	if s.Cache != nil {
		if err := s.Cache.Store(ctx, "Users.List", in, result, trailer); err != nil {
			return nil, err
		}
	}
	return result, nil
}
