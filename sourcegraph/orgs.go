package sourcegraph

import (
	"strconv"
	"strings"
)

// SpecString returns the URL path component that specifies the org.
func (s *OrgSpec) SpecString() string {
	if s.Org != "" {
		return s.Org
	}
	if s.UID > 0 {
		return "$" + strconv.Itoa(int(s.UID))
	}
	panic("empty OrgSpec")
}

func (s *OrgSpec) RouteVars() map[string]string {
	return map[string]string{"OrgSpec": s.SpecString()}
}

// OrgSpec returns the OrgSpec that specifies o.
func (o *Org) OrgSpec() OrgSpec { return OrgSpec{Org: o.Login, UID: o.UID} }

// ParseOrgSpec parses a string generated by (*OrgSpec).String() and
// returns the equivalent OrgSpec struct.
func ParseOrgSpec(pathComponent string) (OrgSpec, error) {
	if strings.HasPrefix(pathComponent, "$") {
		uid, err := strconv.Atoi(pathComponent[1:])
		return OrgSpec{UID: int32(uid)}, err
	}
	return OrgSpec{Org: pathComponent}, nil
}
